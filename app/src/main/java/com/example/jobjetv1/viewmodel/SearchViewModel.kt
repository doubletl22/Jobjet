package com.example.jobjetv1.viewmodel

import androidx.compose.runtime.*
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.delay
import androidx.compose.ui.graphics.Color
import com.example.jobjetv1.data.model.JobCategory
import com.example.jobjetv1.data.model.Job
import com.example.jobjetv1.repository.JobsRepository
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import com.example.jobjetv1.debug.FilterDebugHelper

data class SearchFilters(
    val minSalary: String = "",
    val maxSalary: String = "",
    val location: String = "",
    val jobType: String = "",
    val category: String = "",
    val workTime: String = "",
    val sortBy: String = "newest" // newest, salary_high, salary_low
)

data class SearchUiState(
    val isLoading: Boolean = false,
    val searchResults: List<Job> = emptyList(),
    val hasError: Boolean = false,
    val errorMessage: String = "",
    val isShowingFilters: Boolean = false,
    val appliedFiltersCount: Int = 0
)

class SearchViewModel : ViewModel() {

    private val jobsRepository = JobsRepository
// ... Other imports and code remain the same

    private fun filterJobs(jobs: List<Job>): List<Job> {
        return jobs.filter { job ->
            val matchesSearchText = if (searchText.isBlank()) {
                true
            } else {
                job.title.contains(searchText, ignoreCase = true) ||
                        job.company.contains(searchText, ignoreCase = true) ||
                        job.location.contains(searchText, ignoreCase = true) ||
                        job.description.contains(searchText, ignoreCase = true)
            }

            val matchesCategory = if (searchFilters.category.isEmpty() || searchFilters.category == "T·∫•t c·∫£") {
                true
            } else {
                job.category == searchFilters.category
            }

            val matchesLocation = if (searchFilters.location.isEmpty() || searchFilters.location == "T·∫•t c·∫£") {
                true
            } else {
                job.location.contains(searchFilters.location, ignoreCase = true)
            }

            val matchesJobType = if (searchFilters.jobType.isEmpty() || searchFilters.jobType == "T·∫•t c·∫£") {
                true
            } else {
                job.workType.contains(searchFilters.jobType, ignoreCase = true)
            }

            // Only include workTime filter if Job has workTime property
            val matchesWorkTime = if (searchFilters.workTime.isEmpty() || searchFilters.workTime == "T·∫•t c·∫£") {
                true
            } else {
                job.workTime?.contains(searchFilters.workTime, ignoreCase = true) ?: true // Handle null
            }

            val matchesSalary = if (searchFilters.minSalary.isEmpty() && searchFilters.maxSalary.isEmpty()) {
                true
            } else {
                try {
                    val jobSalary = extractSalaryFromString(job.salary)
                    val minSal = searchFilters.minSalary.toIntOrNull() ?: 0
                    val maxSal = searchFilters.maxSalary.toIntOrNull() ?: Int.MAX_VALUE
                    jobSalary in minSal..maxSal
                } catch (e: Exception) {
                    true
                }
            }

            matchesSearchText && matchesCategory && matchesLocation &&
                    matchesJobType && matchesWorkTime && matchesSalary
        }
    }
    // UI State
    var searchText by mutableStateOf("")
        private set

    var searchFilters by mutableStateOf(SearchFilters())
        private set

    var uiState by mutableStateOf(SearchUiState())
        private set

    var recentSearches by mutableStateOf(listOf("Kho Shopee", "Nh√† h√†ng qu·∫≠n 7", "C√¥ng vi·ªác cu·ªëi tu·∫ßn"))
        private set

    // Dynamic categories with enhanced visual appeal and detailed info
    val categories by derivedStateOf {
        val allJobs = jobsRepository.allJobs
        val warehouseJobs = allJobs.count { job ->
            job.category == "Kho b√£i"
        }
        val restaurantJobs = allJobs.count { job ->
            job.category == "Nh√† h√†ng"
        }
        val salesJobs = allJobs.count { job ->
            job.category == "B√°n h√†ng"
        }
        val officeJobs = allJobs.count { job ->
            job.category == "VƒÉn ph√≤ng"
        }
        val deliveryJobs = allJobs.count { job ->
            job.category == "Giao h√†ng"
        }
        val techJobs = allJobs.count { job ->
            job.category == "K·ªπ thu·∫≠t"
        }

        listOf(
            JobCategory(
                icon = Icons.Default.Inventory,
                label = "Kho b√£i",
                description = "Ph√¢n lo·∫°i, s·∫Øp x·∫øp h√†ng h√≥a t·∫°i c√°c trung t√¢m logistics",
                color = Color(0xFF2E7D32), // Green gradient
                jobCount = warehouseJobs,
                isPopular = warehouseJobs > 2,
                salary = "25-35k/gi·ªù",
                keywords = listOf("Shopee", "Lazada", "Tiki", "Ph√¢n lo·∫°i", "ƒê√≥ng g√≥i", "Sorting")
            ),
            JobCategory(
                icon = Icons.Default.Restaurant,
                label = "Nh√† h√†ng",
                description = "Ph·ª•c v·ª•, pha ch·∫ø, b√°n h√†ng F&B v√† d·ªãch v·ª• ·∫©m th·ª±c",
                color = Color(0xFFE53935), // Red gradient
                jobCount = restaurantJobs,
                isPopular = restaurantJobs > 1,
                salary = "20-30k/gi·ªù",
                keywords = listOf("Ph·ª•c v·ª•", "Pha ch·∫ø", "Cashier", "B·∫øp", "Barista", "KFC", "McDonald's")
            ),
            JobCategory(
                icon = Icons.Default.ShoppingCart,
                label = "B√°n h√†ng",
                description = "T∆∞ v·∫•n, chƒÉm s√≥c kh√°ch h√†ng, b√°n l·∫ª v√† online",
                color = Color(0xFF1E88E5), // Blue gradient
                jobCount = salesJobs,
                isPopular = salesJobs > 1,
                salary = "22-40k/gi·ªù",
                keywords = listOf("T∆∞ v·∫•n", "CSKH", "Telesale", "Retail", "Promoter", "Beauty advisor")
            ),
            JobCategory(
                icon = Icons.Default.BusinessCenter,
                label = "VƒÉn ph√≤ng",
                description = "Admin, data entry, h·ªó tr·ª£ vƒÉn ph√≤ng v√† x·ª≠ l√Ω t√†i li·ªáu",
                color = Color(0xFF8E24AA), // Purple gradient
                jobCount = officeJobs,
                isPopular = officeJobs > 1,
                salary = "25-50k/gi·ªù",
                keywords = listOf("Excel", "Data entry", "Admin", "H·ªó tr·ª£", "Receptionist", "Assistant")
            ),
            JobCategory(
                icon = Icons.Default.LocalShipping,
                label = "Giao h√†ng",
                description = "Shipper, t√†i x·∫ø, courier v√† d·ªãch v·ª• v·∫≠n chuy·ªÉn",
                color = Color(0xFFFF9800), // Orange gradient
                jobCount = deliveryJobs,
                isPopular = deliveryJobs > 1,
                salary = "30-60k/gi·ªù",
                keywords = listOf("Grab", "Bee", "Shipper", "Motorbike", "Now", "Ahamove", "Delivery")
            ),
            JobCategory(
                icon = Icons.Default.Build,
                label = "K·ªπ thu·∫≠t",
                description = "Setup, l·∫Øp ƒë·∫∑t thi·∫øt b·ªã, c√¥ng vi·ªác k·ªπ thu·∫≠t",
                color = Color(0xFF795548), // Brown gradient
                jobCount = techJobs,
                isPopular = techJobs > 0,
                salary = "35-60k/gi·ªù",
                keywords = listOf("Setup", "L·∫Øp ƒë·∫∑t", "K·ªπ thu·∫≠t", "Thi·∫øt b·ªã", "Technical", "Installation")
            ),
            JobCategory(
                icon = Icons.Default.Star,
                label = "T·∫•t c·∫£",
                description = "Kh√°m ph√° to√†n b·ªô c∆° h·ªôi ngh·ªÅ nghi·ªáp d√†nh cho b·∫°n",
                color = Color(0xFF546E7A), // Blue grey gradient
                jobCount = allJobs.size,
                isPopular = false,
                salary = "20-60k/gi·ªù",
                keywords = listOf("Part-time", "Full-time", "Flexible", "Student job", "Weekend", "Evening")
            )
        )
    }

    // Smart suggestions based on trending and user behavior
    val suggestionChips by derivedStateOf {
        val trending = listOf(
            "üíº Part-time Shopee", "üè™ Nh√† h√†ng cu·ªëi tu·∫ßn", "üì¶ Kho Lazada",
            "üöö Shipper Grab", "‚òï Barista", "üõí Cashier si√™u th·ªã"
        )

        val locationBased = listOf(
            "üåü Qu·∫≠n 1 - L∆∞∆°ng cao", "üî• G√≤ V·∫•p hot jobs", "‚ú® Qu·∫≠n 7 m·ªõi"
        )

        val timeBased = listOf(
            "‚è∞ Vi·ªác l√†m t·ªëi", "üåÖ Ca s√°ng linh ho·∫°t", "üéØ Cu·ªëi tu·∫ßn"
        )

        (trending + locationBased + timeBased).shuffled().take(6)
    }

    // Filter options
    val locationOptions = listOf(
        "T·∫•t c·∫£", "Qu·∫≠n 1", "Qu·∫≠n 2", "Qu·∫≠n 3", "Qu·∫≠n 4", "Qu·∫≠n 5",
        "Qu·∫≠n 6", "Qu·∫≠n 7", "Qu·∫≠n 8", "Qu·∫≠n 9", "Qu·∫≠n 10", "Qu·∫≠n 11", "Qu·∫≠n 12",
        "Qu·∫≠n B√¨nh Th·∫°nh", "Qu·∫≠n G√≤ V·∫•p", "Qu·∫≠n Ph√∫ Nhu·∫≠n", "Qu·∫≠n T√¢n B√¨nh",
        "Qu·∫≠n T√¢n Ph√∫", "Qu·∫≠n Th·ªß ƒê·ª©c", "Huy·ªán B√¨nh Ch√°nh", "Huy·ªán H√≥c M√¥n"
    )

    val jobTypeOptions = listOf(
        "T·∫•t c·∫£", "To√†n th·ªùi gian", "B√°n th·ªùi gian", "Th·ª±c t·∫≠p", "Freelance", "H·ª£p ƒë·ªìng"
    )

    val workTimeOptions = listOf(
        "T·∫•t c·∫£", "Ca s√°ng", "Ca chi·ªÅu", "Ca t·ªëi", "Cu·ªëi tu·∫ßn", "Linh ho·∫°t"
    )

    val sortOptions = listOf(
        "newest" to "M·ªõi nh·∫•t",
        "salary_high" to "L∆∞∆°ng cao nh·∫•t",
        "salary_low" to "L∆∞∆°ng th·∫•p nh·∫•t",
        "relevant" to "Ph√π h·ª£p nh·∫•t"
    )

    init {
        // Load t·∫•t c·∫£ jobs khi kh·ªüi t·∫°o
        searchJobs()
    }

    fun updateSearchText(text: String) {
        searchText = text
        if (text.isNotBlank()) {
            searchJobs()
        } else {
            // Reset v·ªÅ t·∫•t c·∫£ jobs khi search text r·ªóng
            searchJobs()
        }
    }

    fun searchJobs() {
        viewModelScope.launch {
            uiState = uiState.copy(isLoading = true, hasError = false)

            try {
                // Simulate network delay
                delay(500)

                val allJobs = jobsRepository.allJobs
                val filteredJobs = filterJobs(allJobs)
                val sortedJobs = sortJobs(filteredJobs)

                uiState = uiState.copy(
                    isLoading = false,
                    searchResults = sortedJobs,
                    hasError = false
                )

            } catch (e: Exception) {
                uiState = uiState.copy(
                    isLoading = false,
                    hasError = true,
                    errorMessage = "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm: ${e.message}"
                )
            }
        }
    }

    private fun sortJobs(jobs: List<Job>): List<Job> {
        return when (searchFilters.sortBy) {
            "salary_high" -> jobs.sortedByDescending { extractSalaryFromString(it.salary) }
            "salary_low" -> jobs.sortedBy { extractSalaryFromString(it.salary) }
            "relevant" -> {
                if (searchText.isBlank()) {
                    jobs.sortedByDescending { it.postedDate }
                } else {
                    jobs.sortedByDescending { job ->
                        val titleMatch = if (job.title.contains(searchText, ignoreCase = true)) 3 else 0
                        val companyMatch = if (job.company.contains(searchText, ignoreCase = true)) 2 else 0
                        val locationMatch = if (job.location.contains(searchText, ignoreCase = true)) 1 else 0
                        titleMatch + companyMatch + locationMatch
                    }
                }
            }
            else -> jobs.sortedByDescending { it.postedDate } // newest
        }
    }

    private fun extractSalaryFromString(salaryStr: String): Int {
        return try {
            // Extract numbers from salary string (e.g., "30.000 - 50.000 VND/gi·ªù" -> 50000)
            val numbers = salaryStr.replace(".", "").replace(",", "")
                .filter { it.isDigit() || it == ' ' || it == '-' }
                .split("-", " ")
                .mapNotNull { it.trim().toIntOrNull() }
                .filter { it > 0 }

            numbers.maxOrNull() ?: 0
        } catch (e: Exception) {
            0
        }
    }

    fun updateFilters(filters: SearchFilters) {
        searchFilters = filters
        uiState = uiState.copy(
            appliedFiltersCount = countAppliedFilters(filters)
        )
        searchJobs()
    }

    private fun countAppliedFilters(filters: SearchFilters): Int {
        var count = 0
        if (filters.minSalary.isNotEmpty()) count++
        if (filters.maxSalary.isNotEmpty()) count++
        if (filters.location.isNotEmpty() && filters.location != "T·∫•t c·∫£") count++
        if (filters.jobType.isNotEmpty() && filters.jobType != "T·∫•t c·∫£") count++
        if (filters.category.isNotEmpty() && filters.category != "T·∫•t c·∫£") count++
        if (filters.workTime.isNotEmpty() && filters.workTime != "T·∫•t c·∫£") count++
        return count
    }

    fun clearFilters() {
        searchFilters = SearchFilters()
        uiState = uiState.copy(appliedFiltersCount = 0)
        searchJobs()
    }

    fun clearQuickFilters() {
        searchFilters = SearchFilters()
        uiState = uiState.copy(appliedFiltersCount = 0)
        searchJobs()
    }

    fun toggleFiltersVisibility() {
        uiState = uiState.copy(isShowingFilters = !uiState.isShowingFilters)
    }

    fun selectCategory(category: String) {
        searchFilters = searchFilters.copy(category = category)
        uiState = uiState.copy(
            appliedFiltersCount = countAppliedFilters(searchFilters)
        )
        searchJobs()
    }

    fun selectSuggestion(suggestion: String) {
        searchText = suggestion
        addRecent(suggestion)
        searchJobs()
    }

    fun removeRecent(index: Int) {
        recentSearches = recentSearches.toMutableList().also { it.removeAt(index) }
    }

    fun addRecent(search: String) {
        if (search.isNotBlank() && !recentSearches.contains(search)) {
            recentSearches = listOf(search) + recentSearches.take(9) // Keep max 10 recent searches
        }
    }

    fun clearError() {
        uiState = uiState.copy(hasError = false, errorMessage = "")
    }

    fun getDebugInfo(): String {
        return FilterDebugHelper.getDebugCategoryInfo()
    }
}
